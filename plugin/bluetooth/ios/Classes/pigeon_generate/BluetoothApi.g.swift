// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum BluetoothStateType: Int {
  case unknown = 0
  case resetting = 1
  case unsupported = 2
  case unauthorized = 3
  case poweredOff = 4
  case poweredOn = 5
}

enum BluetoothDeviceStateType: Int {
  case disconnected = 0
  case connecting = 1
  case connected = 2
  case disconnecting = 3
}

enum BluetoothDeviceConnectErrorType: Int {
  case none = 0
  case abnormalUUIDMacAddress = 1
  case bluetoothOff = 2
  case connectCancel = 3
  case fail = 4
  case timeOut = 5
  case serviceFail = 6
  case characteristicsFail = 7
  case pairFail = 8
  case informationFail = 9
  case cancelByUser = 10
}

enum BluetoothWriteType: Int {
  case withResponse = 0
  case withoutResponse = 1
  case error = 2
}

enum BluetoothScanType: Int {
  case scanning = 0
  case stop = 1
  case find = 2
}

/// Generated class from Pigeon that represents data sent in messages.
struct BleWriteState {
  /// 写入状态
  var state: Bool? = nil
  /// 设备uuid
  var uuid: String? = nil
  /// 设备mac地址
  var macAddress: String? = nil
  /// 写入类型
  var type: BluetoothWriteType? = nil

  static func fromList(_ list: [Any?]) -> BleWriteState? {
    let state: Bool? = nilOrValue(list[0])
    let uuid: String? = nilOrValue(list[1])
    let macAddress: String? = nilOrValue(list[2])
    var type: BluetoothWriteType? = nil
    let typeEnumVal: Int? = nilOrValue(list[3])
    if let typeRawValue = typeEnumVal {
      type = BluetoothWriteType(rawValue: typeRawValue)!
    }

    return BleWriteState(
      state: state,
      uuid: uuid,
      macAddress: macAddress,
      type: type
    )
  }
  func toList() -> [Any?] {
    return [
      state,
      uuid,
      macAddress,
      type?.rawValue,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct BleStateModel {
  /// 蓝牙状态
  var state: BluetoothStateType? = nil
  /// 蓝牙扫描状态
  var scanType: BluetoothScanType? = nil

  static func fromList(_ list: [Any?]) -> BleStateModel? {
    var state: BluetoothStateType? = nil
    let stateEnumVal: Int? = nilOrValue(list[0])
    if let stateRawValue = stateEnumVal {
      state = BluetoothStateType(rawValue: stateRawValue)!
    }
    var scanType: BluetoothScanType? = nil
    let scanTypeEnumVal: Int? = nilOrValue(list[1])
    if let scanTypeRawValue = scanTypeEnumVal {
      scanType = BluetoothScanType(rawValue: scanTypeRawValue)!
    }

    return BleStateModel(
      state: state,
      scanType: scanType
    )
  }
  func toList() -> [Any?] {
    return [
      state?.rawValue,
      scanType?.rawValue,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct BleReceiveData {
  /// 接收到的数据
  var data: FlutterStandardTypedData? = nil
  /// 设备uuid
  var uuid: String? = nil
  /// 设备mac地址
  var macAddress: String? = nil
  /// 是否是spp
  var spp: Bool? = nil
  /// 协议平台 0 爱都, 1 恒玄, 2 VC
  var protocolPlatform: Int64? = nil

  static func fromList(_ list: [Any?]) -> BleReceiveData? {
    let data: FlutterStandardTypedData? = nilOrValue(list[0])
    let uuid: String? = nilOrValue(list[1])
    let macAddress: String? = nilOrValue(list[2])
    let spp: Bool? = nilOrValue(list[3])
    let protocolPlatform: Int64? = isNullish(list[4]) ? nil : (list[4] is Int64? ? list[4] as! Int64? : Int64(list[4] as! Int32))

    return BleReceiveData(
      data: data,
      uuid: uuid,
      macAddress: macAddress,
      spp: spp,
      protocolPlatform: protocolPlatform
    )
  }
  func toList() -> [Any?] {
    return [
      data,
      uuid,
      macAddress,
      spp,
      protocolPlatform,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct BleDeviceStateModel {
  /// 设备uuid
  var uuid: String? = nil
  /// 设备mac地址
  var macAddress: String? = nil
  /// 设备状态
  var state: BluetoothDeviceStateType? = nil
  /// 连接错误状态
  var errorState: BluetoothDeviceConnectErrorType? = nil
  /// 协议平台 0 爱都, 1 恒玄, 2 VC
  var protocolPlatform: Int64? = nil

  static func fromList(_ list: [Any?]) -> BleDeviceStateModel? {
    let uuid: String? = nilOrValue(list[0])
    let macAddress: String? = nilOrValue(list[1])
    var state: BluetoothDeviceStateType? = nil
    let stateEnumVal: Int? = nilOrValue(list[2])
    if let stateRawValue = stateEnumVal {
      state = BluetoothDeviceStateType(rawValue: stateRawValue)!
    }
    var errorState: BluetoothDeviceConnectErrorType? = nil
    let errorStateEnumVal: Int? = nilOrValue(list[3])
    if let errorStateRawValue = errorStateEnumVal {
      errorState = BluetoothDeviceConnectErrorType(rawValue: errorStateRawValue)!
    }
    let protocolPlatform: Int64? = isNullish(list[4]) ? nil : (list[4] is Int64? ? list[4] as! Int64? : Int64(list[4] as! Int32))

    return BleDeviceStateModel(
      uuid: uuid,
      macAddress: macAddress,
      state: state,
      errorState: errorState,
      protocolPlatform: protocolPlatform
    )
  }
  func toList() -> [Any?] {
    return [
      uuid,
      macAddress,
      state?.rawValue,
      errorState?.rawValue,
      protocolPlatform,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct BleDevice {
  /// 设备名称
  var name: String? = nil
  /// 设备mac地址
  var macAddress: String? = nil
  /// 设备uuid
  var uuid: String? = nil
  /// 设备状态
  var state: BluetoothDeviceStateType? = nil
  /// 连接错误状态
  var errorState: BluetoothDeviceConnectErrorType? = nil
  /// 设备id
  var deviceId: Int64? = nil
  /// bt版本号
  var bltVersion: Int64? = nil
  /// 设备广播包数据
  var dataManufacturerData: FlutterStandardTypedData? = nil
  /// 设备类型 0：无效；1：手环；2：手表
  var deviceType: Int64? = nil
  /// 芯片平台类型
  /// 0:nordic, 10:realtek 8762x, 20:cypress psoc6, 30:Apollo3, 40:汇顶, 50:nordic+泰凌微,
  /// 60:泰凌微+5340+no nand flash, 70:汇顶+富瑞坤, 80:5340, 90: 炬芯, 97: 恒玄, 98: 思澈1, 99: 思澈2
  var chipPlatform: Int64? = nil
  /// 信号强度
  var rss: Int64? = nil
  /// 是否是升级设备
  var isOta: Bool? = nil
  /// 电量值
  var battLevel: Int64? = nil
  /// 绑定状态 0:未绑定,1:已绑定
  var bindStatus: Int64? = nil
  /// 设备形状类型 0:未定义,1:圆形,2:方形,3:椭圆
  var deviceShapeType: Int64? = nil
  /// 固件版本号
  var firmwareVersion: Int64? = nil
  /// 自定义表盘主版本 从1开始 0:不支持对应的自定义表盘功能
  var dialMainVersion: Int64? = nil
  /// GPS芯片平台 0：无效 1：索尼 sony 2：洛达 Airoh 3：芯与物 icoe
  var gpsPlatform: Int64? = nil

  static func fromList(_ list: [Any?]) -> BleDevice? {
    let name: String? = nilOrValue(list[0])
    let macAddress: String? = nilOrValue(list[1])
    let uuid: String? = nilOrValue(list[2])
    var state: BluetoothDeviceStateType? = nil
    let stateEnumVal: Int? = nilOrValue(list[3])
    if let stateRawValue = stateEnumVal {
      state = BluetoothDeviceStateType(rawValue: stateRawValue)!
    }
    var errorState: BluetoothDeviceConnectErrorType? = nil
    let errorStateEnumVal: Int? = nilOrValue(list[4])
    if let errorStateRawValue = errorStateEnumVal {
      errorState = BluetoothDeviceConnectErrorType(rawValue: errorStateRawValue)!
    }
    let deviceId: Int64? = isNullish(list[5]) ? nil : (list[5] is Int64? ? list[5] as! Int64? : Int64(list[5] as! Int32))
    let bltVersion: Int64? = isNullish(list[6]) ? nil : (list[6] is Int64? ? list[6] as! Int64? : Int64(list[6] as! Int32))
    let dataManufacturerData: FlutterStandardTypedData? = nilOrValue(list[7])
    let deviceType: Int64? = isNullish(list[8]) ? nil : (list[8] is Int64? ? list[8] as! Int64? : Int64(list[8] as! Int32))
    let chipPlatform: Int64? = isNullish(list[9]) ? nil : (list[9] is Int64? ? list[9] as! Int64? : Int64(list[9] as! Int32))
    let rss: Int64? = isNullish(list[10]) ? nil : (list[10] is Int64? ? list[10] as! Int64? : Int64(list[10] as! Int32))
    let isOta: Bool? = nilOrValue(list[11])
    let battLevel: Int64? = isNullish(list[12]) ? nil : (list[12] is Int64? ? list[12] as! Int64? : Int64(list[12] as! Int32))
    let bindStatus: Int64? = isNullish(list[13]) ? nil : (list[13] is Int64? ? list[13] as! Int64? : Int64(list[13] as! Int32))
    let deviceShapeType: Int64? = isNullish(list[14]) ? nil : (list[14] is Int64? ? list[14] as! Int64? : Int64(list[14] as! Int32))
    let firmwareVersion: Int64? = isNullish(list[15]) ? nil : (list[15] is Int64? ? list[15] as! Int64? : Int64(list[15] as! Int32))
    let dialMainVersion: Int64? = isNullish(list[16]) ? nil : (list[16] is Int64? ? list[16] as! Int64? : Int64(list[16] as! Int32))
    let gpsPlatform: Int64? = isNullish(list[17]) ? nil : (list[17] is Int64? ? list[17] as! Int64? : Int64(list[17] as! Int32))

    return BleDevice(
      name: name,
      macAddress: macAddress,
      uuid: uuid,
      state: state,
      errorState: errorState,
      deviceId: deviceId,
      bltVersion: bltVersion,
      dataManufacturerData: dataManufacturerData,
      deviceType: deviceType,
      chipPlatform: chipPlatform,
      rss: rss,
      isOta: isOta,
      battLevel: battLevel,
      bindStatus: bindStatus,
      deviceShapeType: deviceShapeType,
      firmwareVersion: firmwareVersion,
      dialMainVersion: dialMainVersion,
      gpsPlatform: gpsPlatform
    )
  }
  func toList() -> [Any?] {
    return [
      name,
      macAddress,
      uuid,
      state?.rawValue,
      errorState?.rawValue,
      deviceId,
      bltVersion,
      dataManufacturerData,
      deviceType,
      chipPlatform,
      rss,
      isOta,
      battLevel,
      bindStatus,
      deviceShapeType,
      firmwareVersion,
      dialMainVersion,
      gpsPlatform,
    ]
  }
}

private class ApiBluetoothListenerCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return BleDevice.fromList(self.readValue() as! [Any?])
      case 129:
        return BleDeviceStateModel.fromList(self.readValue() as! [Any?])
      case 130:
        return BleReceiveData.fromList(self.readValue() as! [Any?])
      case 131:
        return BleStateModel.fromList(self.readValue() as! [Any?])
      case 132:
        return dynamic.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class ApiBluetoothListenerCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? BleDevice {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? BleDeviceStateModel {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? BleReceiveData {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? BleStateModel {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? dynamic {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ApiBluetoothListenerCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ApiBluetoothListenerCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ApiBluetoothListenerCodecWriter(data: data)
  }
}

class ApiBluetoothListenerCodec: FlutterStandardMessageCodec {
  static let shared = ApiBluetoothListenerCodec(readerWriter: ApiBluetoothListenerCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class ApiBluetoothListener {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return ApiBluetoothListenerCodec.shared
  }
  /// 收到数据
  /// received data
  func onReceiveData(data dataArg: BleReceiveData, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onReceiveData", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { _ in
      completion()
    }
  }
  /// 设备状态
  /// device state
  func onDeviceState(data dataArg: BleDeviceStateModel, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onDeviceState", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { _ in
      completion()
    }
  }
  /// 蓝牙状态
  /// Bluetooth status
  func onBluetoothState(data dataArg: BleStateModel, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onBluetoothState", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { _ in
      completion()
    }
  }
  /// 搜索结果
  /// Search results
  func onScanResult(data dataArg: [BleDevice], completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onScanResult", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { _ in
      completion()
    }
  }
  /// 写入日志
  /// 'platform': 1：ios、2：android、3：flutter、macos：4
  /// 'className': '类名',
  /// 'method': '方法名',
  /// 'detail': '日志内容'
  func onWriteLog(data dataArg: [String: dynamic], completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onWriteLog", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { _ in
      completion()
    }
  }
}
private class ApiBluetoothCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return BleDevice.fromList(self.readValue() as! [Any?])
      case 129:
        return BleWriteState.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class ApiBluetoothCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? BleDevice {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? BleWriteState {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ApiBluetoothCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ApiBluetoothCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ApiBluetoothCodecWriter(data: data)
  }
}

class ApiBluetoothCodec: FlutterStandardMessageCodec {
  static let shared = ApiBluetoothCodec(readerWriter: ApiBluetoothCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ApiBluetooth {
  /// 开始搜索
  func startScan(completion: @escaping (Result<Bool, Error>) -> Void)
  /// 停止搜索
  func stopScan(completion: @escaping (Result<Bool, Error>) -> Void)
  /// 取消连接
  func cancelConnect(completion: @escaping (Result<Bool, Error>) -> Void)
  /// 手动连接
  /// device: Mac地址必传，iOS要带上uuid，最好使用搜索返回的对象
  func connect(device: BleDevice?, completion: @escaping (Result<Bool, Error>) -> Void)
  /// 使用这个重连设备
  func autoConnect(device: BleDevice?, completion: @escaping (Result<Bool, Error>) -> Void)
  /// 获取蓝牙状态
  func getBluetoothState(completion: @escaping (Result<BluetoothStateType, Error>) -> Void)
  /// 获取设备连接状态
  func getDeviceState(device: BleDevice?, completion: @escaping (Result<BluetoothDeviceStateType, Error>) -> Void)
  /// 发送数据
  /// data:数据
  /// device: 发送数据的设备
  /// type:0 BLE数据, 1 SPP数据
  /// protocolPlatform: 0 爱都, 1 恒玄, 2 VC
  func writeData(data: FlutterStandardTypedData, device: BleDevice?, type: Int64, protocolPlatform: Int64, completion: @escaping (Result<BluetoothWriteType, Error>) -> Void)
  /// 发送数据状态
  /// Send data status
  func writeState(device: BleDevice?, completion: @escaping (Result<BleWriteState, Error>) -> Void)
  /// 原生调用 设置设备筛选过滤条件
  /// deviceName: 只搜索deviceName的设备
  /// deviceID：只搜索deviceID的设备
  /// uuids: 只搜索 uuid设备
  func scanFilter(deviceNames: [String]?, deviceIDs: [Int64]?, macAddresss: [String]?, uuids: [String]?, completion: @escaping (Result<Bool, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ApiBluetoothSetup {
  /// The codec used by ApiBluetooth.
  static var codec: FlutterStandardMessageCodec { ApiBluetoothCodec.shared }
  /// Sets up an instance of `ApiBluetooth` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ApiBluetooth?) {
    /// 开始搜索
    let startScanChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetooth.startScan", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startScanChannel.setMessageHandler { _, reply in
        api.startScan() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      startScanChannel.setMessageHandler(nil)
    }
    /// 停止搜索
    let stopScanChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetooth.stopScan", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopScanChannel.setMessageHandler { _, reply in
        api.stopScan() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      stopScanChannel.setMessageHandler(nil)
    }
    /// 取消连接
    let cancelConnectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetooth.cancelConnect", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      cancelConnectChannel.setMessageHandler { _, reply in
        api.cancelConnect() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      cancelConnectChannel.setMessageHandler(nil)
    }
    /// 手动连接
    /// device: Mac地址必传，iOS要带上uuid，最好使用搜索返回的对象
    let connectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetooth.connect", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      connectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceArg: BleDevice? = nilOrValue(args[0])
        api.connect(device: deviceArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      connectChannel.setMessageHandler(nil)
    }
    /// 使用这个重连设备
    let autoConnectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetooth.autoConnect", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      autoConnectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceArg: BleDevice? = nilOrValue(args[0])
        api.autoConnect(device: deviceArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      autoConnectChannel.setMessageHandler(nil)
    }
    /// 获取蓝牙状态
    let getBluetoothStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetooth.getBluetoothState", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getBluetoothStateChannel.setMessageHandler { _, reply in
        api.getBluetoothState() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res.rawValue))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getBluetoothStateChannel.setMessageHandler(nil)
    }
    /// 获取设备连接状态
    let getDeviceStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetooth.getDeviceState", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDeviceStateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceArg: BleDevice? = nilOrValue(args[0])
        api.getDeviceState(device: deviceArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res.rawValue))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getDeviceStateChannel.setMessageHandler(nil)
    }
    /// 发送数据
    /// data:数据
    /// device: 发送数据的设备
    /// type:0 BLE数据, 1 SPP数据
    /// protocolPlatform: 0 爱都, 1 恒玄, 2 VC
    let writeDataChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetooth.writeData", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      writeDataChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let dataArg = args[0] as! FlutterStandardTypedData
        let deviceArg: BleDevice? = nilOrValue(args[1])
        let typeArg = args[2] is Int64 ? args[2] as! Int64 : Int64(args[2] as! Int32)
        let protocolPlatformArg = args[3] is Int64 ? args[3] as! Int64 : Int64(args[3] as! Int32)
        api.writeData(data: dataArg, device: deviceArg, type: typeArg, protocolPlatform: protocolPlatformArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res.rawValue))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      writeDataChannel.setMessageHandler(nil)
    }
    /// 发送数据状态
    /// Send data status
    let writeStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetooth.writeState", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      writeStateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceArg: BleDevice? = nilOrValue(args[0])
        api.writeState(device: deviceArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      writeStateChannel.setMessageHandler(nil)
    }
    /// 原生调用 设置设备筛选过滤条件
    /// deviceName: 只搜索deviceName的设备
    /// deviceID：只搜索deviceID的设备
    /// uuids: 只搜索 uuid设备
    let scanFilterChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetooth.scanFilter", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      scanFilterChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceNamesArg: [String]? = nilOrValue(args[0])
        let deviceIDsArg: [Int64]? = nilOrValue(args[1])
        let macAddresssArg: [String]? = nilOrValue(args[2])
        let uuidsArg: [String]? = nilOrValue(args[3])
        api.scanFilter(deviceNames: deviceNamesArg, deviceIDs: deviceIDsArg, macAddresss: macAddresssArg, uuids: uuidsArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      scanFilterChannel.setMessageHandler(nil)
    }
  }
}
