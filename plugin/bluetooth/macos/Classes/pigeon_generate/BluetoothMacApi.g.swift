// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum ApiBluetoothStateType: Int {
  case unknown = 0
  case resetting = 1
  case unsupported = 2
  case unauthorized = 3
  case poweredOff = 4
  case poweredOn = 5
}

enum ApiBluetoothDeviceStateType: Int {
  case disconnected = 0
  case connecting = 1
  case connected = 2
  case disconnecting = 3
}

enum ApiBluetoothDeviceConnectErrorType: Int {
  case none = 0
  case abnormalUUIDMacAddress = 1
  case bluetoothOff = 2
  case connectCancel = 3
  case fail = 4
  case timeOut = 5
  case serviceFail = 6
  case characteristicsFail = 7
  case pairFail = 8
  case informationFail = 9
  case cancelByUser = 10
}

enum ApiBluetoothWriteType: Int {
  case withResponse = 0
  case withoutResponse = 1
  case error = 2
}

enum ApiBluetoothScanType: Int {
  case scanning = 0
  case stop = 1
  case find = 2
}

/// Generated class from Pigeon that represents data sent in messages.
struct ApiBleWriteState {
  /// 写入状态
  var state: Bool? = nil
  /// 设备uuid
  var uuid: String? = nil
  /// 设备mac地址
  var macAddress: String? = nil
  /// 写入类型
  var type: ApiBluetoothWriteType? = nil

  static func fromList(_ list: [Any?]) -> ApiBleWriteState? {
    let state: Bool? = nilOrValue(list[0])
    let uuid: String? = nilOrValue(list[1])
    let macAddress: String? = nilOrValue(list[2])
    var type: ApiBluetoothWriteType? = nil
    let typeEnumVal: Int? = nilOrValue(list[3])
    if let typeRawValue = typeEnumVal {
      type = ApiBluetoothWriteType(rawValue: typeRawValue)!
    }

    return ApiBleWriteState(
      state: state,
      uuid: uuid,
      macAddress: macAddress,
      type: type
    )
  }
  func toList() -> [Any?] {
    return [
      state,
      uuid,
      macAddress,
      type?.rawValue,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ApiBleStateModel {
  /// 蓝牙状态
  var state: ApiBluetoothStateType? = nil
  /// 蓝牙扫描状态
  var scanType: ApiBluetoothScanType? = nil

  static func fromList(_ list: [Any?]) -> ApiBleStateModel? {
    var state: ApiBluetoothStateType? = nil
    let stateEnumVal: Int? = nilOrValue(list[0])
    if let stateRawValue = stateEnumVal {
      state = ApiBluetoothStateType(rawValue: stateRawValue)!
    }
    var scanType: ApiBluetoothScanType? = nil
    let scanTypeEnumVal: Int? = nilOrValue(list[1])
    if let scanTypeRawValue = scanTypeEnumVal {
      scanType = ApiBluetoothScanType(rawValue: scanTypeRawValue)!
    }

    return ApiBleStateModel(
      state: state,
      scanType: scanType
    )
  }
  func toList() -> [Any?] {
    return [
      state?.rawValue,
      scanType?.rawValue,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ApiBleReceiveData {
  /// 接收到的数据
  var data: FlutterStandardTypedData? = nil
  /// 设备uuid
  var uuid: String? = nil
  /// 设备mac地址
  var macAddress: String? = nil
  /// 是否是spp
  var spp: Bool? = nil
  /// 协议平台 0 爱都, 1 恒玄, 2 VC
  var protocolPlatform: Int64? = nil

  static func fromList(_ list: [Any?]) -> ApiBleReceiveData? {
    let data: FlutterStandardTypedData? = nilOrValue(list[0])
    let uuid: String? = nilOrValue(list[1])
    let macAddress: String? = nilOrValue(list[2])
    let spp: Bool? = nilOrValue(list[3])
    let protocolPlatform: Int64? = isNullish(list[4]) ? nil : (list[4] is Int64? ? list[4] as! Int64? : Int64(list[4] as! Int32))

    return ApiBleReceiveData(
      data: data,
      uuid: uuid,
      macAddress: macAddress,
      spp: spp,
      protocolPlatform: protocolPlatform
    )
  }
  func toList() -> [Any?] {
    return [
      data,
      uuid,
      macAddress,
      spp,
      protocolPlatform,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ApiBleDeviceStateModel {
  /// 设备uuid
  var uuid: String? = nil
  /// 设备mac地址
  var macAddress: String? = nil
  /// 设备状态
  var state: ApiBluetoothDeviceStateType? = nil
  /// 连接错误状态
  var errorState: ApiBluetoothDeviceConnectErrorType? = nil
  /// 协议平台 0 爱都, 1 恒玄, 2 VC
  var protocolPlatform: Int64? = nil

  static func fromList(_ list: [Any?]) -> ApiBleDeviceStateModel? {
    let uuid: String? = nilOrValue(list[0])
    let macAddress: String? = nilOrValue(list[1])
    var state: ApiBluetoothDeviceStateType? = nil
    let stateEnumVal: Int? = nilOrValue(list[2])
    if let stateRawValue = stateEnumVal {
      state = ApiBluetoothDeviceStateType(rawValue: stateRawValue)!
    }
    var errorState: ApiBluetoothDeviceConnectErrorType? = nil
    let errorStateEnumVal: Int? = nilOrValue(list[3])
    if let errorStateRawValue = errorStateEnumVal {
      errorState = ApiBluetoothDeviceConnectErrorType(rawValue: errorStateRawValue)!
    }
    let protocolPlatform: Int64? = isNullish(list[4]) ? nil : (list[4] is Int64? ? list[4] as! Int64? : Int64(list[4] as! Int32))

    return ApiBleDeviceStateModel(
      uuid: uuid,
      macAddress: macAddress,
      state: state,
      errorState: errorState,
      protocolPlatform: protocolPlatform
    )
  }
  func toList() -> [Any?] {
    return [
      uuid,
      macAddress,
      state?.rawValue,
      errorState?.rawValue,
      protocolPlatform,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ApiBleDevice {
  /// 设备名称
  var name: String? = nil
  /// 设备mac地址
  var macAddress: String? = nil
  /// 设备uuid
  var uuid: String? = nil
  /// 设备状态
  var state: ApiBluetoothDeviceStateType? = nil
  /// 连接错误状态
  var errorState: ApiBluetoothDeviceConnectErrorType? = nil
  /// 设备广播包数据
  var dataManufacturerData: FlutterStandardTypedData? = nil
  /// 设备信号强度
  var rssi: Int64? = nil

  static func fromList(_ list: [Any?]) -> ApiBleDevice? {
    let name: String? = nilOrValue(list[0])
    let macAddress: String? = nilOrValue(list[1])
    let uuid: String? = nilOrValue(list[2])
    var state: ApiBluetoothDeviceStateType? = nil
    let stateEnumVal: Int? = nilOrValue(list[3])
    if let stateRawValue = stateEnumVal {
      state = ApiBluetoothDeviceStateType(rawValue: stateRawValue)!
    }
    var errorState: ApiBluetoothDeviceConnectErrorType? = nil
    let errorStateEnumVal: Int? = nilOrValue(list[4])
    if let errorStateRawValue = errorStateEnumVal {
      errorState = ApiBluetoothDeviceConnectErrorType(rawValue: errorStateRawValue)!
    }
    let dataManufacturerData: FlutterStandardTypedData? = nilOrValue(list[5])
    let rssi: Int64? = isNullish(list[6]) ? nil : (list[6] is Int64? ? list[6] as! Int64? : Int64(list[6] as! Int32))

    return ApiBleDevice(
      name: name,
      macAddress: macAddress,
      uuid: uuid,
      state: state,
      errorState: errorState,
      dataManufacturerData: dataManufacturerData,
      rssi: rssi
    )
  }
  func toList() -> [Any?] {
    return [
      name,
      macAddress,
      uuid,
      state?.rawValue,
      errorState?.rawValue,
      dataManufacturerData,
      rssi,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ApiWriteMessage {
  /// 写入数据
  var data: FlutterStandardTypedData? = nil
  /// 设备uuid
  var uuid: String? = nil
  /// 设备mac地址
  var macAddress: String? = nil
  /// 命令类型 0 基础命令，1 健康数据
  var command: Int64? = nil
  /// 写入类型 0 带响应的写入，1 无响应的写入
  var writeType: Int64? = nil
  /// 协议平台 0 爱都, 1 恒玄, 2 VC
  var protocolPlatform: Int64? = nil

  static func fromList(_ list: [Any?]) -> ApiWriteMessage? {
    let data: FlutterStandardTypedData? = nilOrValue(list[0])
    let uuid: String? = nilOrValue(list[1])
    let macAddress: String? = nilOrValue(list[2])
    let command: Int64? = isNullish(list[3]) ? nil : (list[3] is Int64? ? list[3] as! Int64? : Int64(list[3] as! Int32))
    let writeType: Int64? = isNullish(list[4]) ? nil : (list[4] is Int64? ? list[4] as! Int64? : Int64(list[4] as! Int32))
    let protocolPlatform: Int64? = isNullish(list[5]) ? nil : (list[5] is Int64? ? list[5] as! Int64? : Int64(list[5] as! Int32))

    return ApiWriteMessage(
      data: data,
      uuid: uuid,
      macAddress: macAddress,
      command: command,
      writeType: writeType,
      protocolPlatform: protocolPlatform
    )
  }
  func toList() -> [Any?] {
    return [
      data,
      uuid,
      macAddress,
      command,
      writeType,
      protocolPlatform,
    ]
  }
}

private class ApiBluetoothListenerCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return ApiBleDevice.fromList(self.readValue() as! [Any?])
      case 129:
        return ApiBleDeviceStateModel.fromList(self.readValue() as! [Any?])
      case 130:
        return ApiBleReceiveData.fromList(self.readValue() as! [Any?])
      case 131:
        return ApiBleStateModel.fromList(self.readValue() as! [Any?])
      case 132:
        return ApiBleWriteState.fromList(self.readValue() as! [Any?])
      case 133:
        return ApiWriteMessage.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class ApiBluetoothListenerCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ApiBleDevice {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? ApiBleDeviceStateModel {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? ApiBleReceiveData {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? ApiBleStateModel {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? ApiBleWriteState {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? ApiWriteMessage {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ApiBluetoothListenerCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ApiBluetoothListenerCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ApiBluetoothListenerCodecWriter(data: data)
  }
}

class ApiBluetoothListenerCodec: FlutterStandardMessageCodec {
  static let shared = ApiBluetoothListenerCodec(readerWriter: ApiBluetoothListenerCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class ApiBluetoothListener {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return ApiBluetoothListenerCodec.shared
  }
  /// 收到数据
  /// received data
  func onReceiveData(data dataArg: ApiBleReceiveData, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onReceiveData", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { _ in
      completion()
    }
  }
  /// 设备状态
  /// device state
  func onDeviceState(data dataArg: ApiBleDeviceStateModel, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onDeviceState", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { _ in
      completion()
    }
  }
  /// 蓝牙状态
  /// Bluetooth status
  func onBluetoothState(data dataArg: ApiBleStateModel, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onBluetoothState", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { _ in
      completion()
    }
  }
  /// 搜索结果
  /// Search results
  func onScanResult(data dataArg: ApiBleDevice, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onScanResult", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { _ in
      completion()
    }
  }
  /// 发送数据状态
  /// on write data state
  func onWriteState(data dataArg: ApiBleWriteState, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onWriteState", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { _ in
      completion()
    }
  }
  /// 写入日志
  /// 'platform': 1：ios、2：android、3：flutter、macos：4
  /// 'className': '类名',
  /// 'method': '方法名',
  /// 'detail': '日志内容'
  func onWriteLog(data dataArg: [AnyHashable: Any?], completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onWriteLog", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { _ in
      completion()
    }
  }
  /// 发现特征
  /// on discover characteristics
  func onDiscoverCharacteristics(uuids uuidsArg: [String], completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onDiscoverCharacteristics", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([uuidsArg] as [Any?]) { _ in
      completion()
    }
  }
}
private class ApiBluetoothCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return ApiBleDevice.fromList(self.readValue() as! [Any?])
      case 129:
        return ApiBleDeviceStateModel.fromList(self.readValue() as! [Any?])
      case 130:
        return ApiBleStateModel.fromList(self.readValue() as! [Any?])
      case 131:
        return ApiBleWriteState.fromList(self.readValue() as! [Any?])
      case 132:
        return ApiWriteMessage.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class ApiBluetoothCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ApiBleDevice {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? ApiBleDeviceStateModel {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? ApiBleStateModel {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? ApiBleWriteState {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? ApiWriteMessage {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ApiBluetoothCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ApiBluetoothCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ApiBluetoothCodecWriter(data: data)
  }
}

class ApiBluetoothCodec: FlutterStandardMessageCodec {
  static let shared = ApiBluetoothCodec(readerWriter: ApiBluetoothCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ApiBluetooth {
  /// 开始搜索
  func startScan(completion: @escaping (Result<Bool, Error>) -> Void)
  /// 停止搜索
  func stopScan(completion: @escaping (Result<Bool, Error>) -> Void)
  /// 取消连接
  func cancelConnect(device: ApiBleDevice?, completion: @escaping (Result<Bool, Error>) -> Void)
  /// 手动连接
  /// device: Mac地址必传，iOS要带上uuid，最好使用搜索返回的对象
  func connect(device: ApiBleDevice?, completion: @escaping (Result<Bool, Error>) -> Void)
  /// 获取蓝牙状态
  func getBluetoothState(completion: @escaping (Result<ApiBleStateModel, Error>) -> Void)
  /// 获取设备连接状态
  func getDeviceState(device: ApiBleDevice?, completion: @escaping (Result<ApiBleDeviceStateModel, Error>) -> Void)
  /// 发送数据
  /// WriteMessage:数据
  /// device: 发送数据的设备
  /// type:0 BLE数据, 1 SPP数据
  func writeData(data: ApiWriteMessage, device: ApiBleDevice?, type: Int64, completion: @escaping (Result<ApiBleWriteState, Error>) -> Void)
  /// 关闭所有蓝牙通知 （固件需要知道已杀死App）
  func closeNotifyCharacteristic(completion: @escaping (Result<Bool, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ApiBluetoothSetup {
  /// The codec used by ApiBluetooth.
  static var codec: FlutterStandardMessageCodec { ApiBluetoothCodec.shared }
  /// Sets up an instance of `ApiBluetooth` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ApiBluetooth?) {
    /// 开始搜索
    let startScanChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetooth.startScan", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startScanChannel.setMessageHandler { _, reply in
        api.startScan() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      startScanChannel.setMessageHandler(nil)
    }
    /// 停止搜索
    let stopScanChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetooth.stopScan", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopScanChannel.setMessageHandler { _, reply in
        api.stopScan() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      stopScanChannel.setMessageHandler(nil)
    }
    /// 取消连接
    let cancelConnectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetooth.cancelConnect", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      cancelConnectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceArg: ApiBleDevice? = nilOrValue(args[0])
        api.cancelConnect(device: deviceArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      cancelConnectChannel.setMessageHandler(nil)
    }
    /// 手动连接
    /// device: Mac地址必传，iOS要带上uuid，最好使用搜索返回的对象
    let connectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetooth.connect", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      connectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceArg: ApiBleDevice? = nilOrValue(args[0])
        api.connect(device: deviceArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      connectChannel.setMessageHandler(nil)
    }
    /// 获取蓝牙状态
    let getBluetoothStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetooth.getBluetoothState", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getBluetoothStateChannel.setMessageHandler { _, reply in
        api.getBluetoothState() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getBluetoothStateChannel.setMessageHandler(nil)
    }
    /// 获取设备连接状态
    let getDeviceStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetooth.getDeviceState", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDeviceStateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceArg: ApiBleDevice? = nilOrValue(args[0])
        api.getDeviceState(device: deviceArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getDeviceStateChannel.setMessageHandler(nil)
    }
    /// 发送数据
    /// WriteMessage:数据
    /// device: 发送数据的设备
    /// type:0 BLE数据, 1 SPP数据
    let writeDataChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetooth.writeData", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      writeDataChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let dataArg = args[0] as! ApiWriteMessage
        let deviceArg: ApiBleDevice? = nilOrValue(args[1])
        let typeArg = args[2] is Int64 ? args[2] as! Int64 : Int64(args[2] as! Int32)
        api.writeData(data: dataArg, device: deviceArg, type: typeArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      writeDataChannel.setMessageHandler(nil)
    }
    /// 关闭所有蓝牙通知 （固件需要知道已杀死App）
    let closeNotifyCharacteristicChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth.ApiBluetooth.closeNotifyCharacteristic", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      closeNotifyCharacteristicChannel.setMessageHandler { _, reply in
        api.closeNotifyCharacteristic() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      closeNotifyCharacteristicChannel.setMessageHandler(nil)
    }
  }
}
