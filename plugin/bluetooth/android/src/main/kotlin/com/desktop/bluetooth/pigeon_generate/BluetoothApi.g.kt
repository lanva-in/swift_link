// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.desktop.bluetooth.pigeon_generate.api_bluetooth

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class ApiBluetoothStateType(val raw: Int) {
  UNKNOWN(0),
  RESETTING(1),
  UNSUPPORTED(2),
  UNAUTHORIZED(3),
  POWEREDOFF(4),
  POWEREDON(5);

  companion object {
    fun ofRaw(raw: Int): ApiBluetoothStateType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ApiBluetoothDeviceStateType(val raw: Int) {
  DISCONNECTED(0),
  CONNECTING(1),
  CONNECTED(2),
  DISCONNECTING(3);

  companion object {
    fun ofRaw(raw: Int): ApiBluetoothDeviceStateType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ApiBluetoothDeviceConnectErrorType(val raw: Int) {
  NONE(0),
  ABNORMALUUIDMACADDRESS(1),
  BLUETOOTHOFF(2),
  CONNECTCANCEL(3),
  FAIL(4),
  TIMEOUT(5),
  SERVICEFAIL(6),
  CHARACTERISTICSFAIL(7),
  PAIRFAIL(8),
  INFORMATIONFAIL(9),
  CANCELBYUSER(10);

  companion object {
    fun ofRaw(raw: Int): ApiBluetoothDeviceConnectErrorType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ApiBluetoothWriteType(val raw: Int) {
  WITHRESPONSE(0),
  WITHOUTRESPONSE(1),
  ERROR(2);

  companion object {
    fun ofRaw(raw: Int): ApiBluetoothWriteType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ApiBluetoothScanType(val raw: Int) {
  SCANNING(0),
  STOP(1),
  FIND(2);

  companion object {
    fun ofRaw(raw: Int): ApiBluetoothScanType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ApiBleWriteState (
  /** 写入状态 */
  val state: Boolean? = null,
  /** 设备uuid */
  val uuid: String? = null,
  /** 设备mac地址 */
  val macAddress: String? = null,
  /** 写入类型 */
  val type: ApiBluetoothWriteType? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ApiBleWriteState {
      val state = list[0] as Boolean?
      val uuid = list[1] as String?
      val macAddress = list[2] as String?
      val type: ApiBluetoothWriteType? = (list[3] as Int?)?.let {
        ApiBluetoothWriteType.ofRaw(it)
      }
      return ApiBleWriteState(state, uuid, macAddress, type)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      state,
      uuid,
      macAddress,
      type?.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ApiBleStateModel (
  /** 蓝牙状态 */
  val state: ApiBluetoothStateType? = null,
  /** 蓝牙扫描状态 */
  val scanType: ApiBluetoothScanType? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ApiBleStateModel {
      val state: ApiBluetoothStateType? = (list[0] as Int?)?.let {
        ApiBluetoothStateType.ofRaw(it)
      }
      val scanType: ApiBluetoothScanType? = (list[1] as Int?)?.let {
        ApiBluetoothScanType.ofRaw(it)
      }
      return ApiBleStateModel(state, scanType)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      state?.raw,
      scanType?.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ApiBleReceiveData (
  /** 接收到的数据 */
  val data: ByteArray? = null,
  /** 设备uuid */
  val uuid: String? = null,
  /** 设备mac地址 */
  val macAddress: String? = null,
  /** 是否是spp */
  val spp: Boolean? = null,
  /** 协议平台 0 爱都, 1 恒玄, 2 VC */
  val protocolPlatform: Long? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ApiBleReceiveData {
      val data = list[0] as ByteArray?
      val uuid = list[1] as String?
      val macAddress = list[2] as String?
      val spp = list[3] as Boolean?
      val protocolPlatform = list[4].let { if (it is Int) it.toLong() else it as Long? }
      return ApiBleReceiveData(data, uuid, macAddress, spp, protocolPlatform)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      data,
      uuid,
      macAddress,
      spp,
      protocolPlatform,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ApiBleDeviceStateModel (
  /** 设备uuid */
  val uuid: String? = null,
  /** 设备mac地址 */
  val macAddress: String? = null,
  /** 设备状态 */
  val state: ApiBluetoothDeviceStateType? = null,
  /** 连接错误状态 */
  val errorState: ApiBluetoothDeviceConnectErrorType? = null,
  /** 协议平台 0 爱都, 1 恒玄, 2 VC */
  val protocolPlatform: Long? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ApiBleDeviceStateModel {
      val uuid = list[0] as String?
      val macAddress = list[1] as String?
      val state: ApiBluetoothDeviceStateType? = (list[2] as Int?)?.let {
        ApiBluetoothDeviceStateType.ofRaw(it)
      }
      val errorState: ApiBluetoothDeviceConnectErrorType? = (list[3] as Int?)?.let {
        ApiBluetoothDeviceConnectErrorType.ofRaw(it)
      }
      val protocolPlatform = list[4].let { if (it is Int) it.toLong() else it as Long? }
      return ApiBleDeviceStateModel(uuid, macAddress, state, errorState, protocolPlatform)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      uuid,
      macAddress,
      state?.raw,
      errorState?.raw,
      protocolPlatform,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ApiBleDevice (
  /** 设备名称 */
  val name: String? = null,
  /** 设备mac地址 */
  val macAddress: String? = null,
  /** 设备uuid */
  val uuid: String? = null,
  /** 设备状态 */
  val state: ApiBluetoothDeviceStateType? = null,
  /** 连接错误状态 */
  val errorState: ApiBluetoothDeviceConnectErrorType? = null,
  /** 设备广播包数据 */
  val dataManufacturerData: ByteArray? = null,
  /** 设备信号强度 */
  val rssi: Long? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ApiBleDevice {
      val name = list[0] as String?
      val macAddress = list[1] as String?
      val uuid = list[2] as String?
      val state: ApiBluetoothDeviceStateType? = (list[3] as Int?)?.let {
        ApiBluetoothDeviceStateType.ofRaw(it)
      }
      val errorState: ApiBluetoothDeviceConnectErrorType? = (list[4] as Int?)?.let {
        ApiBluetoothDeviceConnectErrorType.ofRaw(it)
      }
      val dataManufacturerData = list[5] as ByteArray?
      val rssi = list[6].let { if (it is Int) it.toLong() else it as Long? }
      return ApiBleDevice(name, macAddress, uuid, state, errorState, dataManufacturerData, rssi)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      name,
      macAddress,
      uuid,
      state?.raw,
      errorState?.raw,
      dataManufacturerData,
      rssi,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ApiWriteMessage (
  /** 写入数据 */
  val data: ByteArray? = null,
  /** 设备uuid */
  val uuid: String? = null,
  /** 设备mac地址 */
  val macAddress: String? = null,
  /** 命令类型 0 基础命令，1 健康数据 */
  val command: Long? = null,
  /** 写入类型 0 带响应的写入，1 无响应的写入 */
  val writeType: Long? = null,
  /** 协议平台 0 爱都, 1 恒玄, 2 VC */
  val protocolPlatform: Long? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ApiWriteMessage {
      val data = list[0] as ByteArray?
      val uuid = list[1] as String?
      val macAddress = list[2] as String?
      val command = list[3].let { if (it is Int) it.toLong() else it as Long? }
      val writeType = list[4].let { if (it is Int) it.toLong() else it as Long? }
      val protocolPlatform = list[5].let { if (it is Int) it.toLong() else it as Long? }
      return ApiWriteMessage(data, uuid, macAddress, command, writeType, protocolPlatform)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      data,
      uuid,
      macAddress,
      command,
      writeType,
      protocolPlatform,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object ApiBluetoothListenerCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ApiBleDevice.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ApiBleDeviceStateModel.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ApiBleReceiveData.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ApiBleStateModel.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ApiBleWriteState.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ApiWriteMessage.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is ApiBleDevice -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is ApiBleDeviceStateModel -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is ApiBleReceiveData -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is ApiBleStateModel -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is ApiBleWriteState -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is ApiWriteMessage -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class ApiBluetoothListener(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by ApiBluetoothListener. */
    val codec: MessageCodec<Any?> by lazy {
      ApiBluetoothListenerCodec
    }
  }
  /**
   * 收到数据
   * received data
   */
  fun onReceiveData(dataArg: ApiBleReceiveData, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onReceiveData", codec)
    channel.send(listOf(dataArg)) {
      callback()
    }
  }
  /**
   * 设备状态
   * device state
   */
  fun onDeviceState(dataArg: ApiBleDeviceStateModel, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onDeviceState", codec)
    channel.send(listOf(dataArg)) {
      callback()
    }
  }
  /**
   * 蓝牙状态
   * Bluetooth status
   */
  fun onBluetoothState(dataArg: ApiBleStateModel, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onBluetoothState", codec)
    channel.send(listOf(dataArg)) {
      callback()
    }
  }
  /**
   * 搜索结果
   * Search results
   */
  fun onScanResult(dataArg: ApiBleDevice, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onScanResult", codec)
    channel.send(listOf(dataArg)) {
      callback()
    }
  }
  /**
   * 发送数据状态
   * on write data state
   */
  fun onWriteState(dataArg: ApiBleWriteState, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onWriteState", codec)
    channel.send(listOf(dataArg)) {
      callback()
    }
  }
  /**
   * 写入日志
   * 'platform': 1：ios、2：android、3：flutter、macos：4
   * 'className': '类名',
   * 'method': '方法名',
   * 'detail': '日志内容'
   */
  fun onWriteLog(dataArg: Map<Any, Any?>, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onWriteLog", codec)
    channel.send(listOf(dataArg)) {
      callback()
    }
  }
  /**
   * 发现特征
   * on discover characteristics
   */
  fun onDiscoverCharacteristics(uuidsArg: List<String>, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onDiscoverCharacteristics", codec)
    channel.send(listOf(uuidsArg)) {
      callback()
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object ApiBluetoothCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ApiBleDevice.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ApiBleDeviceStateModel.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ApiBleStateModel.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ApiBleWriteState.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ApiWriteMessage.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is ApiBleDevice -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is ApiBleDeviceStateModel -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is ApiBleStateModel -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is ApiBleWriteState -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is ApiWriteMessage -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface ApiBluetooth {
  /** 开始搜索 */
  fun startScan(callback: (Result<Boolean>) -> Unit)
  /** 停止搜索 */
  fun stopScan(callback: (Result<Boolean>) -> Unit)
  /** 取消连接 */
  fun cancelConnect(device: ApiBleDevice?, callback: (Result<Boolean>) -> Unit)
  /**
   * 手动连接
   * device: Mac地址必传，iOS要带上uuid，最好使用搜索返回的对象
   */
  fun connect(device: ApiBleDevice?, callback: (Result<Boolean>) -> Unit)
  /** 获取蓝牙状态 */
  fun getBluetoothState(callback: (Result<ApiBleStateModel>) -> Unit)
  /** 获取设备连接状态 */
  fun getDeviceState(device: ApiBleDevice?, callback: (Result<ApiBleDeviceStateModel>) -> Unit)
  /**
   * 发送数据
   * WriteMessage:数据
   * device: 发送数据的设备
   * type:0 BLE数据, 1 SPP数据
   */
  fun writeData(data: ApiWriteMessage, device: ApiBleDevice?, type: Long, callback: (Result<ApiBleWriteState>) -> Unit)
  /** 关闭所有蓝牙通知 （固件需要知道已杀死App） */
  fun closeNotifyCharacteristic(callback: (Result<Boolean>) -> Unit)

  companion object {
    /** The codec used by ApiBluetooth. */
    val codec: MessageCodec<Any?> by lazy {
      ApiBluetoothCodec
    }
    /** Sets up an instance of `ApiBluetooth` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: ApiBluetooth?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth.ApiBluetooth.startScan", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.startScan() { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth.ApiBluetooth.stopScan", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.stopScan() { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth.ApiBluetooth.cancelConnect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceArg = args[0] as ApiBleDevice?
            api.cancelConnect(deviceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth.ApiBluetooth.connect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceArg = args[0] as ApiBleDevice?
            api.connect(deviceArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth.ApiBluetooth.getBluetoothState", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getBluetoothState() { result: Result<ApiBleStateModel> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth.ApiBluetooth.getDeviceState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceArg = args[0] as ApiBleDevice?
            api.getDeviceState(deviceArg) { result: Result<ApiBleDeviceStateModel> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth.ApiBluetooth.writeData", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val dataArg = args[0] as ApiWriteMessage
            val deviceArg = args[1] as ApiBleDevice?
            val typeArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            api.writeData(dataArg, deviceArg, typeArg) { result: Result<ApiBleWriteState> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth.ApiBluetooth.closeNotifyCharacteristic", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.closeNotifyCharacteristic() { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
