// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum ApiBluetoothStateType {
  unknown,
  resetting,
  unsupported,
  unauthorized,
  poweredOff,
  poweredOn,
}

enum ApiBluetoothDeviceStateType {
  disconnected,
  connecting,
  connected,
  disconnecting,
}

enum ApiBluetoothDeviceConnectErrorType {
  none,
  abnormalUUIDMacAddress,
  bluetoothOff,
  connectCancel,
  fail,
  timeOut,
  serviceFail,
  characteristicsFail,
  pairFail,
  informationFail,
  cancelByUser,
}

enum ApiBluetoothWriteType {
  withResponse,
  withoutResponse,
  error,
}

enum ApiBluetoothScanType {
  scanning,
  stop,
  find,
}

class ApiBleWriteState {
  ApiBleWriteState({
    this.state,
    this.uuid,
    this.macAddress,
    this.type,
  });

  /// 写入状态
  bool? state;

  /// 设备uuid
  String? uuid;

  /// 设备mac地址
  String? macAddress;

  /// 写入类型
  ApiBluetoothWriteType? type;

  Object encode() {
    return <Object?>[
      state,
      uuid,
      macAddress,
      type?.index,
    ];
  }

  static ApiBleWriteState decode(Object result) {
    result as List<Object?>;
    return ApiBleWriteState(
      state: result[0] as bool?,
      uuid: result[1] as String?,
      macAddress: result[2] as String?,
      type: result[3] != null
          ? ApiBluetoothWriteType.values[result[3]! as int]
          : null,
    );
  }
}

class ApiBleStateModel {
  ApiBleStateModel({
    this.state,
    this.scanType,
  });

  /// 蓝牙状态
  ApiBluetoothStateType? state;

  /// 蓝牙扫描状态
  ApiBluetoothScanType? scanType;

  Object encode() {
    return <Object?>[
      state?.index,
      scanType?.index,
    ];
  }

  static ApiBleStateModel decode(Object result) {
    result as List<Object?>;
    return ApiBleStateModel(
      state: result[0] != null
          ? ApiBluetoothStateType.values[result[0]! as int]
          : null,
      scanType: result[1] != null
          ? ApiBluetoothScanType.values[result[1]! as int]
          : null,
    );
  }
}

class ApiBleReceiveData {
  ApiBleReceiveData({
    this.data,
    this.uuid,
    this.macAddress,
    this.spp,
    this.protocolPlatform,
  });

  /// 接收到的数据
  Uint8List? data;

  /// 设备uuid
  String? uuid;

  /// 设备mac地址
  String? macAddress;

  /// 是否是spp
  bool? spp;

  /// 协议平台 0 爱都, 1 恒玄, 2 VC
  int? protocolPlatform;

  Object encode() {
    return <Object?>[
      data,
      uuid,
      macAddress,
      spp,
      protocolPlatform,
    ];
  }

  static ApiBleReceiveData decode(Object result) {
    result as List<Object?>;
    return ApiBleReceiveData(
      data: result[0] as Uint8List?,
      uuid: result[1] as String?,
      macAddress: result[2] as String?,
      spp: result[3] as bool?,
      protocolPlatform: result[4] as int?,
    );
  }
}

class ApiBleDeviceStateModel {
  ApiBleDeviceStateModel({
    this.uuid,
    this.macAddress,
    this.state,
    this.errorState,
    this.protocolPlatform,
  });

  /// 设备uuid
  String? uuid;

  /// 设备mac地址
  String? macAddress;

  /// 设备状态
  ApiBluetoothDeviceStateType? state;

  /// 连接错误状态
  ApiBluetoothDeviceConnectErrorType? errorState;

  /// 协议平台 0 爱都, 1 恒玄, 2 VC
  int? protocolPlatform;

  Object encode() {
    return <Object?>[
      uuid,
      macAddress,
      state?.index,
      errorState?.index,
      protocolPlatform,
    ];
  }

  static ApiBleDeviceStateModel decode(Object result) {
    result as List<Object?>;
    return ApiBleDeviceStateModel(
      uuid: result[0] as String?,
      macAddress: result[1] as String?,
      state: result[2] != null
          ? ApiBluetoothDeviceStateType.values[result[2]! as int]
          : null,
      errorState: result[3] != null
          ? ApiBluetoothDeviceConnectErrorType.values[result[3]! as int]
          : null,
      protocolPlatform: result[4] as int?,
    );
  }
}

class ApiBleDevice {
  ApiBleDevice({
    this.name,
    this.macAddress,
    this.uuid,
    this.state,
    this.errorState,
    this.dataManufacturerData,
    this.rssi,
  });

  /// 设备名称
  String? name;

  /// 设备mac地址
  String? macAddress;

  /// 设备uuid
  String? uuid;

  /// 设备状态
  ApiBluetoothDeviceStateType? state;

  /// 连接错误状态
  ApiBluetoothDeviceConnectErrorType? errorState;

  /// 设备广播包数据
  Uint8List? dataManufacturerData;

  /// 设备信号强度
  int? rssi;

  Object encode() {
    return <Object?>[
      name,
      macAddress,
      uuid,
      state?.index,
      errorState?.index,
      dataManufacturerData,
      rssi,
    ];
  }

  static ApiBleDevice decode(Object result) {
    result as List<Object?>;
    return ApiBleDevice(
      name: result[0] as String?,
      macAddress: result[1] as String?,
      uuid: result[2] as String?,
      state: result[3] != null
          ? ApiBluetoothDeviceStateType.values[result[3]! as int]
          : null,
      errorState: result[4] != null
          ? ApiBluetoothDeviceConnectErrorType.values[result[4]! as int]
          : null,
      dataManufacturerData: result[5] as Uint8List?,
      rssi: result[6] as int?,
    );
  }
}

class ApiWriteMessage {
  ApiWriteMessage({
    this.data,
    this.uuid,
    this.macAddress,
    this.command,
    this.writeType,
    this.protocolPlatform,
  });

  /// 写入数据
  Uint8List? data;

  /// 设备uuid
  String? uuid;

  /// 设备mac地址
  String? macAddress;

  /// 命令类型 0 基础命令，1 健康数据
  int? command;

  /// 写入类型 0 带响应的写入，1 无响应的写入
  int? writeType;

  /// 协议平台 0 爱都, 1 恒玄, 2 VC
  int? protocolPlatform;

  Object encode() {
    return <Object?>[
      data,
      uuid,
      macAddress,
      command,
      writeType,
      protocolPlatform,
    ];
  }

  static ApiWriteMessage decode(Object result) {
    result as List<Object?>;
    return ApiWriteMessage(
      data: result[0] as Uint8List?,
      uuid: result[1] as String?,
      macAddress: result[2] as String?,
      command: result[3] as int?,
      writeType: result[4] as int?,
      protocolPlatform: result[5] as int?,
    );
  }
}

class _ApiBluetoothListenerCodec extends StandardMessageCodec {
  const _ApiBluetoothListenerCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ApiBleDevice) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ApiBleDeviceStateModel) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is ApiBleReceiveData) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is ApiBleStateModel) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is ApiBleWriteState) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is ApiWriteMessage) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return ApiBleDevice.decode(readValue(buffer)!);
      case 129: 
        return ApiBleDeviceStateModel.decode(readValue(buffer)!);
      case 130: 
        return ApiBleReceiveData.decode(readValue(buffer)!);
      case 131: 
        return ApiBleStateModel.decode(readValue(buffer)!);
      case 132: 
        return ApiBleWriteState.decode(readValue(buffer)!);
      case 133: 
        return ApiWriteMessage.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class ApiBluetoothListener {

  static const MessageCodec<Object?> codec = _ApiBluetoothListenerCodec();

  /// 收到数据
  /// received data
  void onReceiveData(ApiBleReceiveData data);

  /// 设备状态
  /// device state
  void onDeviceState(ApiBleDeviceStateModel data);

  /// 蓝牙状态
  /// Bluetooth status
  void onBluetoothState(ApiBleStateModel data);

  /// 搜索结果
  /// Search results
  void onScanResult(ApiBleDevice data);

  /// 发送数据状态
  /// on write data state
  void onWriteState(ApiBleWriteState data);

  /// 写入日志
  /// 'platform': 1：ios、2：android、3：flutter、macos：4
  /// 'className': '类名',
  /// 'method': '方法名',
  /// 'detail': '日志内容'
  void onWriteLog(Map<Object?, Object?> data);

  /// 发现特征
  /// on discover characteristics
  void onDiscoverCharacteristics(List<String?> uuids);

  static void setup(ApiBluetoothListener? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onReceiveData', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onReceiveData was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ApiBleReceiveData? arg_data = (args[0] as ApiBleReceiveData?);
          assert(arg_data != null,
              'Argument for dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onReceiveData was null, expected non-null ApiBleReceiveData.');
          api.onReceiveData(arg_data!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onDeviceState', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onDeviceState was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ApiBleDeviceStateModel? arg_data = (args[0] as ApiBleDeviceStateModel?);
          assert(arg_data != null,
              'Argument for dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onDeviceState was null, expected non-null ApiBleDeviceStateModel.');
          api.onDeviceState(arg_data!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onBluetoothState', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onBluetoothState was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ApiBleStateModel? arg_data = (args[0] as ApiBleStateModel?);
          assert(arg_data != null,
              'Argument for dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onBluetoothState was null, expected non-null ApiBleStateModel.');
          api.onBluetoothState(arg_data!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onScanResult', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onScanResult was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ApiBleDevice? arg_data = (args[0] as ApiBleDevice?);
          assert(arg_data != null,
              'Argument for dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onScanResult was null, expected non-null ApiBleDevice.');
          api.onScanResult(arg_data!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onWriteState', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onWriteState was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ApiBleWriteState? arg_data = (args[0] as ApiBleWriteState?);
          assert(arg_data != null,
              'Argument for dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onWriteState was null, expected non-null ApiBleWriteState.');
          api.onWriteState(arg_data!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onWriteLog', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onWriteLog was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Map<Object?, Object?>? arg_data = (args[0] as Map<Object?, Object?>?);
          assert(arg_data != null,
              'Argument for dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onWriteLog was null, expected non-null Map<Object?, Object?>.');
          api.onWriteLog(arg_data!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onDiscoverCharacteristics', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onDiscoverCharacteristics was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final List<String?>? arg_uuids = (args[0] as List<Object?>?)?.cast<String?>();
          assert(arg_uuids != null,
              'Argument for dev.flutter.pigeon.bluetooth.ApiBluetoothListener.onDiscoverCharacteristics was null, expected non-null List<String?>.');
          api.onDiscoverCharacteristics(arg_uuids!);
          return;
        });
      }
    }
  }
}

class _ApiBluetoothCodec extends StandardMessageCodec {
  const _ApiBluetoothCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ApiBleDevice) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ApiBleDeviceStateModel) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is ApiBleStateModel) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is ApiBleWriteState) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is ApiWriteMessage) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return ApiBleDevice.decode(readValue(buffer)!);
      case 129: 
        return ApiBleDeviceStateModel.decode(readValue(buffer)!);
      case 130: 
        return ApiBleStateModel.decode(readValue(buffer)!);
      case 131: 
        return ApiBleWriteState.decode(readValue(buffer)!);
      case 132: 
        return ApiWriteMessage.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ApiBluetooth {
  /// Constructor for [ApiBluetooth].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ApiBluetooth({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ApiBluetoothCodec();

  /// 开始搜索
  Future<bool> startScan() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bluetooth.ApiBluetooth.startScan', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  /// 停止搜索
  Future<bool> stopScan() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bluetooth.ApiBluetooth.stopScan', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  /// 取消连接
  Future<bool> cancelConnect(ApiBleDevice? arg_device) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bluetooth.ApiBluetooth.cancelConnect', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_device]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  /// 手动连接
  /// device: Mac地址必传，iOS要带上uuid，最好使用搜索返回的对象
  Future<bool> connect(ApiBleDevice? arg_device) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bluetooth.ApiBluetooth.connect', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_device]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  /// 获取蓝牙状态
  Future<ApiBleStateModel> getBluetoothState() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bluetooth.ApiBluetooth.getBluetoothState', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ApiBleStateModel?)!;
    }
  }

  /// 获取设备连接状态
  Future<ApiBleDeviceStateModel> getDeviceState(ApiBleDevice? arg_device) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bluetooth.ApiBluetooth.getDeviceState', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_device]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ApiBleDeviceStateModel?)!;
    }
  }

  /// 发送数据
  /// WriteMessage:数据
  /// device: 发送数据的设备
  /// type:0 BLE数据, 1 SPP数据
  Future<ApiBleWriteState> writeData(ApiWriteMessage arg_data, ApiBleDevice? arg_device, int arg_type) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bluetooth.ApiBluetooth.writeData', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_data, arg_device, arg_type]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ApiBleWriteState?)!;
    }
  }

  /// 关闭所有蓝牙通知 （固件需要知道已杀死App）
  Future<bool> closeNotifyCharacteristic() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bluetooth.ApiBluetooth.closeNotifyCharacteristic', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }
}
